/* $Id$ */

#ifndef _SCANNER_H
#define _SCANNER_H

#ifndef YY_DECL
#define YY_DECL \
  ddc::Parser::token_type \
  ddc::Scanner::lex( \
    ddc::Parser::semantic_type* yylval, \
    ddc::Parser::location_type* yylloc \
  )
#endif

#ifndef __FLEX_LEXER_H
#define yyFlexLexer DdcFlexLexer
#include "FlexLexer.h"
#undef yyFlexLexer
#endif

#include "parser.hh"

namespace ddc {

    /**
     * Scanner is a derived class to add some extra function to the scanner
     * class. Flex itself creates a class named yyFlexLexer, which is renamed using
     * macros to DdcFlexLexer. However we change the context of the generated
     * yylex() function to be contained within the Scanner class. This is required
     * because the yylex() defined in DdcFlexLexer has no parameters.
     */
    class Scanner : public DdcFlexLexer {
    public:
        /**
         * Create a new scanner object. The streams arg_yyin and arg_yyout default
         * to cin and cout, but that assignment is only made when initializing in
         * yylex().
         */
        Scanner(std::istream *arg_yyin = 0,
                std::ostream *arg_yyout = 0);

        /** Required for virtual functions */
        virtual ~Scanner();

        /**
         * This is the main lexing function. It is generated by flex according to
         * the macro declaration YY_DECL above. The generated bison parser then
         * calls this virtual function to fetch new tokens.
         */
        virtual Parser::token_type lex(
                Parser::semantic_type *yylval,
                Parser::location_type *yylloc
        );

        /** Enable debug output (via arg_yyout) if compiled into the scanner. */
        void set_debug(bool b);
    };

}

#endif /* _SCANNER_H */